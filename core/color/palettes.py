from typing import Tuple
from core.nd import xp as np, Array


def _to_np_array(x: Array) -> Array:
    return np.asarray(x, dtype=np.float32)


# Public palettes (formerly _PALETTES)
PALETTES = {
    'viridis': [
        [0.267, 0.005, 0.329], [0.283, 0.141, 0.458], [0.254, 0.265, 0.531],
        [0.207, 0.372, 0.553], [0.164, 0.471, 0.558], [0.128, 0.567, 0.551],
        [0.135, 0.658, 0.518], [0.266, 0.748, 0.441], [0.478, 0.821, 0.318],
        [0.741, 0.873, 0.150]
    ],
    'magma': [
        [0.001, 0.000, 0.016], [0.063, 0.026, 0.105], [0.129, 0.045, 0.210],
        [0.196, 0.059, 0.322], [0.266, 0.066, 0.438], [0.345, 0.064, 0.558],
        [0.438, 0.050, 0.675], [0.549, 0.024, 0.783], [0.678, 0.066, 0.842],
        [0.816, 0.191, 0.835], [0.948, 0.357, 0.764], [0.993, 0.538, 0.646]
    ],
    'inferno': [
        [0.001, 0.000, 0.014], [0.069, 0.046, 0.131], [0.144, 0.082, 0.267],
        [0.219, 0.105, 0.410], [0.296, 0.114, 0.559], [0.383, 0.102, 0.708],
        [0.489, 0.067, 0.842], [0.620, 0.031, 0.917], [0.762, 0.100, 0.906],
        [0.893, 0.261, 0.841], [0.988, 0.473, 0.770], [0.998, 0.674, 0.643]
    ],
    'plasma': [
        [0.050, 0.030, 0.527], [0.270, 0.009, 0.705], [0.468, 0.016, 0.706],
        [0.644, 0.057, 0.646], [0.797, 0.125, 0.555], [0.910, 0.239, 0.457],
        [0.980, 0.396, 0.351], [0.997, 0.580, 0.251], [0.941, 0.784, 0.153],
        [0.828, 0.990, 0.164]
    ],
    'turbo': [
        [0.189, 0.071, 0.232], [0.251, 0.118, 0.380], [0.305, 0.165, 0.520],
        [0.357, 0.214, 0.648], [0.407, 0.266, 0.761], [0.457, 0.321, 0.858],
        [0.508, 0.378, 0.938], [0.563, 0.444, 0.998], [0.625, 0.517, 1.000],
        [0.695, 0.596, 0.972], [0.770, 0.677, 0.917], [0.842, 0.753, 0.842],
        [0.904, 0.820, 0.753], [0.952, 0.874, 0.655], [0.985, 0.914, 0.553],
        [1.000, 0.945, 0.451]
    ],
    'sunset': [[0.05, 0.02, 0.20], [0.35, 0.05, 0.35], [0.70, 0.20, 0.35], [0.95, 0.50, 0.25], [1.00, 0.80, 0.40]],
    'ocean':  [[0.00, 0.05, 0.15], [0.00, 0.25, 0.45], [0.00, 0.55, 0.65], [0.20, 0.80, 0.80], [0.65, 0.95, 0.90]],
    'forest': [[0.04, 0.10, 0.03], [0.08, 0.25, 0.06], [0.15, 0.45, 0.10], [0.30, 0.65, 0.18], [0.70, 0.85, 0.45]],
    'icefire':[[0.00, 0.00, 0.30], [0.00, 0.30, 0.60], [0.20, 0.70, 0.85], [0.85, 0.40, 0.20], [0.90, 0.05, 0.05]],
    'cubehelix': [[0.00, 0.00, 0.00], [0.10, 0.05, 0.20], [0.25, 0.20, 0.45], [0.45, 0.45, 0.65], [0.75, 0.75, 0.85], [1.00, 1.00, 1.00]],
}


def sample_palette(t: Array, name: str = 'viridis', reverse: bool = False) -> Tuple[Array, Array, Array]:
    """Sample RGB from a named palette at positions t in [0,1]."""
    if name not in PALETTES:
        name = 'viridis'
    stops = _to_np_array(PALETTES[name])  # shape (N, 3)
    if reverse:
        stops = stops[::-1]
    n = stops.shape[0]
    tt = np.clip(t, 0.0, 1.0) * (n - 1)
    i0 = np.floor(tt).astype(np.int32)
    i1 = np.clip(i0 + 1, 0, n - 1)
    frac = tt - i0
    c0 = stops[i0]
    c1 = stops[i1]
    rgb = c0 * (1 - frac[..., None]) + c1 * frac[..., None]
    return rgb[..., 0], rgb[..., 1], rgb[..., 2]


